const path = require('path');
const rtlcss = require('rtlcss');

class RTLCSSPlugin {
  constructor(options) {
    this.options = options || {};
  }

  apply(compiler) {
    compiler.hooks.emit.tapAsync('RTLCSSPlugin', (compilation, callback) => {
      try {
        // Explore each chunk (build output):
        compilation.chunks.forEach(chunk => {
          // Explore each asset filename generated by the chunk:
          chunk.files.forEach(filename => {
            // Get the asset source for each file generated by the chunk:
            const directory = path.dirname(filename),
              cssPath = this.options.path;
            if (
              (!cssPath || cssPath === directory) &&
              path.extname(filename) === '.css'
            ) {
              const rtl = rtlcss.process(compilation.assets[filename].source());
              compilation.assets[
                `${directory}/${path.basename(filename, '.css')}.rtl.css`
              ] = {
                source: function() {
                  return rtl;
                },
                size: function() {
                  return rtl.length;
                }
              };
            }
          });
        });
      } catch (e) {
        console.error(e);
      }
      callback();
    });
  }
}

module.exports = RTLCSSPlugin;
